#
# Linker script for SGROM/SNROM (2 Mbit)
# Copyright 2010 Damian Yerrick
#
# Copying and distribution of this file, with or without
# modification, are permitted in any medium without royalty
# provided the copyright notice and this notice are preserved.
# This file is offered as-is, without any warranty.
#
MEMORY {
  ZP:     start = $10, size = $f0, type = rw;
  # use first $10 zeropage locations as locals
  HEADER: start = 0, size = $0010, type = ro, file = %O, fill=yes, fillval=$00;
  RAM:    start = $0300, size = $0500, type = rw;

  # Insert automatic memory here

  ROM15:  start = $C000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF;
}

SEGMENTS {
  ZEROPAGE: load = ZP, type = zp;
  BSS:      load = RAM, type = bss, define = yes, align = $100;

  INESHDR:  load = HEADER, type = ro, align = $10;

  # Insert automatic segments here

  DMC:      load = ROM15, type = ro, align = 64, optional = yes;
  CODE:     load = ROM15, type = ro, align = $100;
  RODATA:   load = ROM15, type = ro, align = $100;

  STUB00:   load = ROM0,  type = ro, start = $BFF0;
  STUB01:   load = ROM1,  type = ro, start = $BFF0;
  STUB02:   load = ROM2,  type = ro, start = $BFF0;
  STUB03:   load = ROM3,  type = ro, start = $BFF0;
  STUB04:   load = ROM4,  type = ro, start = $BFF0;
  STUB05:   load = ROM5,  type = ro, start = $BFF0;
  STUB06:   load = ROM6,  type = ro, start = $BFF0;
  STUB07:   load = ROM7,  type = ro, start = $BFF0;
  STUB08:   load = ROM8,  type = ro, start = $BFF0;
  STUB09:   load = ROM9,  type = ro, start = $BFF0;
  STUB10:   load = ROM10, type = ro, start = $BFF0;
  STUB11:   load = ROM11, type = ro, start = $BFF0;
  STUB12:   load = ROM12, type = ro, start = $BFF0;
  STUB13:   load = ROM13, type = ro, start = $BFF0;
  STUB14:   load = ROM14, type = ro, start = $BFF0;
  STUB15:   load = ROM15, type = ro, start = $FFF0;
}

FILES {
  %O: format = bin;
}

